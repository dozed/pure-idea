/* The following code was generated by JFlex 1.4.3 on 9/15/16 3:49 PM */

package in.twbs.pure.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static in.twbs.pure.lang.psi.PureTokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/15/16 3:49 PM from the specification file
 * <tt>pure.flex</tt>
 */
class _PureLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int BLOCK_STRINGS = 6;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRINGS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\22\1\23\1\64\1\22\2\23\15\22\5\0\1\1\1\2\1\33"+
    "\3\2\1\31\1\7\1\120\1\121\1\2\1\30\1\117\1\62\1\25"+
    "\1\2\1\124\1\56\1\56\1\56\1\56\3\21\2\12\1\114\1\113"+
    "\1\112\1\110\1\111\2\2\1\53\1\34\1\43\1\55\1\27\1\41"+
    "\1\47\1\36\1\45\1\16\1\54\1\40\1\46\1\51\1\20\1\45"+
    "\1\52\1\44\1\35\1\37\1\50\1\42\1\16\1\14\1\57\1\16"+
    "\1\122\1\24\1\123\1\60\1\4\1\115\1\66\1\32\1\102\1\65"+
    "\1\26\1\74\1\77\1\106\1\76\2\15\1\101\1\100\1\72\1\17"+
    "\1\71\1\107\1\75\1\103\1\67\1\105\1\104\1\73\1\13\1\70"+
    "\1\15\1\61\1\116\1\63\1\2\53\0\1\6\12\0\1\6\4\0"+
    "\1\6\5\0\27\11\1\0\7\11\30\6\1\0\10\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\2\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\2\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\2\11\1\6\1\11\1\6"+
    "\1\11\3\6\2\11\1\6\1\11\1\6\2\11\1\6\3\11\2\6"+
    "\4\11\1\6\2\11\1\6\3\11\3\6\2\11\1\6\2\11\1\6"+
    "\1\11\1\6\1\11\1\6\2\11\1\6\1\11\2\6\1\11\1\6"+
    "\2\11\1\6\3\11\1\6\1\11\1\6\2\11\2\6\1\5\1\11"+
    "\3\6\4\5\1\11\1\5\1\6\1\11\1\5\1\6\1\11\1\5"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\2\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\2\6\1\11\1\5\1\6\1\11\1\6"+
    "\3\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\7\6"+
    "\2\11\1\6\2\11\2\6\1\11\1\6\4\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\105\6\1\5\44\6\7\5\2\6"+
    "\4\0\14\5\16\0\5\6\7\0\1\5\1\0\1\5\126\0\1\3"+
    "\52\0\1\11\1\6\1\11\1\6\1\5\1\0\1\11\1\6\2\0"+
    "\4\6\10\0\1\11\1\0\3\11\1\0\1\11\1\0\2\11\1\6"+
    "\21\11\1\0\11\11\43\6\1\11\2\6\3\11\3\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\5\6\1\11\1\6\1\0\1\11\1\6\2\11\2\6\63\11"+
    "\60\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\10\0\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\2\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\2\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\11\0\46\11\2\0\1\5\7\0\47\6\110\0\33\5"+
    "\5\0\3\5\55\0\53\5\25\0\12\5\4\0\2\5\1\0\143\5"+
    "\1\0\1\5\17\0\2\5\7\0\2\5\12\5\3\5\2\0\1\5"+
    "\20\0\1\5\1\0\36\5\35\0\131\5\13\0\1\5\16\0\12\5"+
    "\41\5\11\0\2\5\4\0\1\5\5\0\26\5\4\0\1\5\11\0"+
    "\1\5\3\0\1\5\27\0\31\5\107\0\1\5\1\0\13\5\127\0"+
    "\66\5\3\0\1\5\22\0\1\5\7\0\12\5\4\0\12\5\1\0"+
    "\7\5\1\0\7\5\5\0\10\5\2\0\2\5\2\0\26\5\1\0"+
    "\7\5\1\0\1\5\3\0\4\5\3\0\1\5\20\0\1\5\15\0"+
    "\2\5\1\0\3\5\4\0\12\5\2\5\23\0\6\5\4\0\2\5"+
    "\2\0\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5"+
    "\37\0\4\5\1\0\1\5\7\0\12\5\2\0\3\5\20\0\11\5"+
    "\1\0\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"+
    "\3\0\1\5\22\0\1\5\17\0\2\5\4\0\12\5\25\0\10\5"+
    "\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"+
    "\3\0\1\5\36\0\2\5\1\0\3\5\4\0\12\5\1\0\1\5"+
    "\21\0\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5"+
    "\26\0\1\5\25\0\12\5\25\0\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\12\5\1\0\5\5\3\0\1\5\32\0\2\5\6\0\2\5"+
    "\4\0\12\5\25\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\3\0\1\5\40\0\1\5\1\0\2\5\4\0\12\5"+
    "\1\0\2\5\22\0\10\5\1\0\3\5\1\0\51\5\2\0\1\5"+
    "\20\0\1\5\21\0\2\5\4\0\12\5\12\0\6\5\5\0\22\5"+
    "\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5\72\0\60\5"+
    "\1\0\2\5\14\0\7\5\11\0\12\5\47\0\2\5\1\0\1\5"+
    "\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5"+
    "\1\0\2\5\11\0\1\5\2\0\5\5\1\0\1\5\11\0\12\5"+
    "\2\0\4\5\40\0\1\5\37\0\12\5\26\0\10\5\1\0\44\5"+
    "\33\0\5\5\163\0\53\5\24\0\1\5\12\5\6\0\6\5\4\0"+
    "\4\5\3\0\1\5\3\0\2\5\7\0\3\5\4\0\15\5\14\0"+
    "\1\5\1\0\12\5\6\0\46\11\1\0\1\11\5\0\1\11\2\0"+
    "\53\5\1\0\u014d\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0"+
    "\4\5\2\0\51\5\1\0\4\5\2\0\41\5\1\0\4\5\2\0"+
    "\7\5\1\0\1\5\1\0\4\5\2\0\17\5\1\0\71\5\1\0"+
    "\4\5\2\0\103\5\45\0\20\5\20\0\125\5\14\0\u026c\5\2\0"+
    "\21\5\1\0\32\5\5\0\113\5\25\0\15\5\1\0\4\5\16\0"+
    "\22\5\16\0\22\5\16\0\15\5\1\0\3\5\17\0\64\5\43\0"+
    "\1\5\4\0\1\5\3\0\12\5\46\0\12\5\6\0\130\5\10\0"+
    "\51\5\1\0\1\5\5\0\106\5\12\0\35\5\51\0\12\5\36\5"+
    "\2\0\5\5\13\0\54\5\25\0\7\5\10\0\12\5\46\0\27\5"+
    "\11\0\65\5\53\0\12\5\6\0\12\5\15\0\1\5\135\0\57\5"+
    "\21\0\7\5\4\0\12\5\51\0\36\5\15\0\2\5\12\5\54\5"+
    "\32\0\44\5\34\0\12\5\3\0\3\5\12\5\44\5\153\0\4\5"+
    "\1\0\4\5\3\0\2\5\11\0\300\6\100\0\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\11\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\11\6\10\11\6\6\2\0\6\11\2\0"+
    "\10\6\10\11\10\6\10\11\6\6\2\0\6\11\2\0\10\6\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\1\11\10\6\10\11\16\6"+
    "\2\0\10\6\10\5\10\6\10\5\10\6\10\5\5\6\1\0\2\6"+
    "\4\11\1\5\1\0\1\6\3\0\3\6\1\0\2\6\4\11\1\5"+
    "\3\0\4\6\2\0\2\6\4\11\4\0\10\6\5\11\5\0\3\6"+
    "\1\0\2\6\4\11\1\5\164\0\1\6\15\0\1\6\20\0\15\6"+
    "\145\0\1\11\4\0\1\11\2\0\1\6\3\11\2\6\3\11\1\6"+
    "\1\0\1\11\3\0\5\11\6\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\4\11\1\0\1\6\4\11\1\6\4\5\1\6\2\0\2\6"+
    "\2\11\5\0\1\11\4\6\4\0\1\6\21\0\20\10\20\3\3\0"+
    "\1\11\1\6\u0331\0\32\10\32\3\u0716\0\57\11\1\0\57\6\1\0"+
    "\1\11\1\6\3\11\2\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\4\11\1\6\1\11\2\6\1\11\10\6\3\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\2\6\6\0\1\11\1\6\1\11"+
    "\1\6\3\0\1\11\1\6\14\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\70\5\7\0\1\5\20\0\27\5\11\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\120\0\1\5\u01d5\0\2\5\52\0\5\5\5\0\2\5"+
    "\4\0\126\5\6\0\3\5\1\0\132\5\1\0\4\5\5\0\51\5"+
    "\3\0\136\5\21\0\33\5\65\0\20\5\u0200\0\u19b6\5\112\0\u51cd\5"+
    "\63\0\u048d\5\103\0\56\5\2\0\u010d\5\3\0\20\5\12\5\2\5"+
    "\24\0\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\5\20\0\1\5"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6"+
    "\1\11\1\6\1\11\1\6\10\0\106\5\61\0\11\5\2\0\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\3\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\1\6\1\11\12\6\1\11\1\6\1\11\1\6\2\11"+
    "\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\5"+
    "\2\0\1\11\1\6\1\11\1\6\1\0\1\11\1\6\1\11\1\6"+
    "\14\0\1\11\1\6\1\11\1\6\1\11\1\6\1\11\1\6\1\11"+
    "\1\6\1\11\115\0\3\6\7\5\1\0\3\5\1\0\4\5\1\0"+
    "\27\5\35\0\64\5\16\0\62\5\34\0\12\5\30\0\6\5\3\0"+
    "\1\5\4\0\12\5\34\5\12\0\27\5\31\0\35\5\7\0\57\5"+
    "\34\0\1\5\12\5\46\0\51\5\27\0\3\5\1\0\10\5\4\0"+
    "\12\5\6\0\27\5\3\0\1\5\5\0\60\5\1\0\1\5\3\0"+
    "\2\5\2\0\5\5\2\0\1\5\1\0\1\5\30\0\3\5\2\0"+
    "\13\5\7\0\3\5\14\0\6\5\2\0\6\5\2\0\6\5\11\0"+
    "\7\5\1\0\7\5\221\0\43\5\15\0\12\5\6\0\u2ba4\5\14\0"+
    "\27\5\4\0\61\5\u2104\0\u016e\5\2\0\152\5\46\0\7\6\14\0"+
    "\5\6\5\0\1\5\1\0\12\5\1\0\15\5\1\0\5\5\1\0"+
    "\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0"+
    "\100\5\2\0\66\5\50\0\14\5\164\0\5\5\1\0\207\5\23\0"+
    "\12\5\7\0\32\11\6\0\32\6\13\0\131\5\3\0\6\5\2\0"+
    "\6\5\2\0\6\5\2\0\3\5\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\4"+
    "\1\7\1\10\1\4\1\11\1\12\1\3\1\13\14\4"+
    "\1\14\1\3\1\15\1\3\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\6\3\25\1\26\1\27\1\30"+
    "\1\26\2\0\1\31\1\32\1\4\1\0\1\33\1\34"+
    "\1\35\1\36\2\4\1\37\7\4\1\40\1\41\7\4"+
    "\1\42\1\43\1\44\2\0\1\45\1\46\1\0\2\47"+
    "\3\0\1\50\14\0\2\51\1\0\1\4\1\52\15\4"+
    "\1\53\4\4\2\6\2\47\4\0\1\47\6\0\1\54"+
    "\1\4\1\55\1\56\1\57\1\60\11\4\1\61\5\4"+
    "\1\62\2\4\1\63\1\64\3\4\1\65\2\4\1\66"+
    "\2\4\1\67\1\70\1\71\1\4\1\72\1\73\1\74"+
    "\1\4\1\75\1\76\2\4\1\77\1\4\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"+
    "\0\u02a8\0\u02fd\0\u0352\0\u01fe\0\u03a7\0\u03fc\0\u0451\0\u04a6"+
    "\0\u04fb\0\u0154\0\u0550\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\u06f9"+
    "\0\u074e\0\u07a3\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\u094c\0\u09a1"+
    "\0\u0154\0\u09f6\0\u0154\0\u01fe\0\u0154\0\u0154\0\u0154\0\u0154"+
    "\0\u0154\0\u0a4b\0\u0154\0\u0aa0\0\u0af5\0\u0154\0\u0b4a\0\u0154"+
    "\0\u0b9f\0\u0bf4\0\u0c49\0\u0253\0\u01fe\0\u0c9e\0\u0cf3\0\u0154"+
    "\0\u0d48\0\u01fe\0\u0253\0\u0d9d\0\u0df2\0\u0253\0\u0e47\0\u0e9c"+
    "\0\u0ef1\0\u0f46\0\u0f9b\0\u0ff0\0\u1045\0\u109a\0\u0253\0\u10ef"+
    "\0\u1144\0\u1199\0\u11ee\0\u1243\0\u1298\0\u12ed\0\u01fe\0\u01fe"+
    "\0\u01fe\0\u1342\0\u1397\0\u0154\0\u0154\0\u13ec\0\u0154\0\u1441"+
    "\0\u1496\0\u14eb\0\u1540\0\u0154\0\u1595\0\u15ea\0\u163f\0\u1694"+
    "\0\u16e9\0\u173e\0\u1793\0\u17e8\0\u183d\0\u1892\0\u18e7\0\u193c"+
    "\0\u1991\0\u19e6\0\u19e6\0\u1a3b\0\u0154\0\u1a90\0\u1ae5\0\u1b3a"+
    "\0\u1b8f\0\u1be4\0\u1c39\0\u1c8e\0\u1ce3\0\u1d38\0\u1d8d\0\u1de2"+
    "\0\u1e37\0\u1e8c\0\u0253\0\u1ee1\0\u1f36\0\u1f8b\0\u1fe0\0\u1342"+
    "\0\u1397\0\u1496\0\u14eb\0\u2035\0\u208a\0\u20df\0\u2134\0\u2189"+
    "\0\u21de\0\u2233\0\u2288\0\u22dd\0\u2332\0\u2387\0\u0253\0\u23dc"+
    "\0\u0253\0\u0253\0\u0253\0\u0253\0\u2431\0\u2486\0\u24db\0\u2530"+
    "\0\u2585\0\u25da\0\u262f\0\u2684\0\u26d9\0\u0253\0\u272e\0\u2783"+
    "\0\u27d8\0\u282d\0\u2882\0\u0253\0\u28d7\0\u292c\0\u0253\0\u2981"+
    "\0\u29d6\0\u2a2b\0\u2a80\0\u0253\0\u2ad5\0\u2b2a\0\u0253\0\u2b7f"+
    "\0\u2bd4\0\u0253\0\u0253\0\u0253\0\u2c29\0\u0253\0\u0253\0\u0253"+
    "\0\u2c7e\0\u0253\0\u0253\0\u2cd3\0\u2d28\0\u0253\0\u2d7d\0\u0253";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\2\10\1\5\1\10\1\5\2\11"+
    "\1\12\1\10\1\11\1\10\1\11\1\13\1\11\1\12"+
    "\1\5\1\6\1\14\1\15\1\16\1\11\2\7\1\10"+
    "\1\17\22\11\1\12\1\11\1\7\1\20\1\21\1\22"+
    "\1\6\1\23\1\24\1\25\2\10\1\26\1\27\1\30"+
    "\1\10\1\31\1\10\1\32\1\33\1\34\3\10\1\35"+
    "\1\36\1\37\1\7\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\61\53\1\54"+
    "\1\55\42\53\22\56\2\5\1\57\6\56\1\60\30\56"+
    "\1\5\73\56\1\61\71\56\126\0\1\6\21\0\1\6"+
    "\40\0\1\6\42\0\1\7\21\0\2\7\2\0\2\7"+
    "\26\0\1\7\1\0\1\7\25\0\3\7\1\0\1\7"+
    "\1\0\1\7\12\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\23\10\14\0\1\10"+
    "\5\0\2\11\2\0\11\11\4\0\2\11\2\0\1\11"+
    "\1\0\24\11\5\0\23\11\14\0\1\11\12\0\1\12"+
    "\6\0\1\12\3\0\1\62\2\63\26\0\1\12\45\0"+
    "\1\12\4\0\4\10\1\0\11\10\4\0\2\10\2\0"+
    "\1\10\1\0\24\10\5\0\7\10\1\64\13\10\14\0"+
    "\1\10\2\0\1\7\21\0\1\7\1\65\2\0\2\7"+
    "\26\0\1\7\1\0\1\7\25\0\3\7\1\0\1\7"+
    "\1\0\1\7\12\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\14\10\1\66\6\10"+
    "\14\0\1\10\33\0\1\67\153\0\1\70\44\0\1\7"+
    "\21\0\2\7\2\0\2\7\26\0\1\7\1\0\1\71"+
    "\25\0\1\7\1\72\1\7\1\0\1\7\1\0\1\7"+
    "\12\0\4\10\1\0\6\10\1\73\2\10\4\0\1\74"+
    "\1\10\2\0\1\10\1\0\24\10\5\0\1\10\1\75"+
    "\21\10\14\0\1\10\4\0\4\10\1\0\11\10\4\0"+
    "\2\10\2\0\1\10\1\0\24\10\5\0\16\10\1\76"+
    "\4\10\14\0\1\10\4\0\4\10\1\0\11\10\4\0"+
    "\2\10\2\0\1\10\1\0\24\10\5\0\3\10\1\77"+
    "\4\10\1\100\10\10\1\101\1\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\1\102\1\10\2\0\1\10"+
    "\1\0\24\10\5\0\23\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\21\10\1\103\1\10\14\0\1\10\4\0\4\10"+
    "\1\0\6\10\1\104\2\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\1\10\1\105\21\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\5\10\1\106\1\10\1\107\3\10"+
    "\1\110\7\10\14\0\1\10\4\0\4\10\1\0\6\10"+
    "\1\111\2\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\23\10\14\0\1\10\4\0\4\10\1\0\11\10"+
    "\4\0\1\112\1\10\2\0\1\10\1\0\24\10\5\0"+
    "\23\10\14\0\1\10\4\0\4\10\1\0\11\10\4\0"+
    "\2\10\2\0\1\10\1\0\24\10\5\0\1\10\1\113"+
    "\12\10\1\114\6\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\2\10\2\0\1\10\1\0\24\10\5\0"+
    "\11\10\1\115\11\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\2\10\2\0\1\10\1\0\24\10\5\0"+
    "\20\10\1\116\2\10\14\0\1\10\2\0\1\7\21\0"+
    "\2\7\2\0\2\7\26\0\1\7\1\0\1\7\25\0"+
    "\1\7\1\117\1\7\1\0\1\7\1\0\1\7\10\0"+
    "\1\7\21\0\2\7\2\0\2\7\26\0\1\7\1\0"+
    "\1\120\25\0\3\7\1\0\1\7\1\0\1\7\10\0"+
    "\1\7\21\0\2\7\2\0\2\7\26\0\1\7\1\0"+
    "\1\7\25\0\3\7\1\0\1\121\1\0\1\7\20\0"+
    "\1\12\2\122\2\0\2\123\1\12\3\0\1\62\2\63"+
    "\26\0\1\12\45\0\1\12\62\0\1\124\125\0\1\125"+
    "\42\0\1\126\5\0\1\127\2\0\1\130\1\131\3\0"+
    "\1\132\1\0\1\130\1\0\1\126\1\127\2\0\1\133"+
    "\1\0\1\134\2\127\1\135\1\136\1\137\1\0\1\140"+
    "\1\141\1\137\1\142\1\143\2\0\2\143\1\144\1\0"+
    "\1\145\1\0\1\146\1\130\1\0\1\147\3\0\1\126"+
    "\1\0\2\127\2\0\1\127\1\0\2\127\6\0\1\127"+
    "\17\0\1\130\33\0\1\150\103\0\1\151\6\0\1\151"+
    "\34\0\1\151\45\0\1\151\12\0\1\152\6\0\1\152"+
    "\6\0\1\153\25\0\1\152\3\0\1\153\41\0\1\152"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\16\10\1\154\4\10\14\0\1\10"+
    "\33\0\1\155\71\0\64\71\1\0\40\71\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\10\10\1\156\12\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\2\10\1\157\20\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\4\10\1\160\16\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\20\10\1\161\2\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\1\162\1\10\2\0\1\10\1\0"+
    "\24\10\5\0\23\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\2\10\2\0\1\10\1\0\24\10\5\0"+
    "\6\10\1\163\14\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\1\164\1\10\2\0\1\10\1\0\24\10"+
    "\5\0\23\10\14\0\1\10\4\0\4\10\1\0\11\10"+
    "\4\0\2\10\2\0\1\10\1\0\24\10\5\0\10\10"+
    "\1\165\12\10\14\0\1\10\4\0\4\10\1\0\11\10"+
    "\4\0\2\10\2\0\1\10\1\0\24\10\5\0\14\10"+
    "\1\166\6\10\14\0\1\10\4\0\4\10\1\0\11\10"+
    "\4\0\2\10\2\0\1\10\1\0\24\10\5\0\7\10"+
    "\1\167\6\10\1\170\4\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\4\10\1\171\16\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\1\172\22\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\2\10\2\0\1\10\1\0\24\10\5\0"+
    "\2\10\1\173\20\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\2\10\2\0\1\10\1\0\24\10\5\0"+
    "\16\10\1\174\4\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\2\10\2\0\1\10\1\0\24\10\5\0"+
    "\1\10\1\175\21\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\2\10\2\0\1\10\1\0\24\10\5\0"+
    "\1\176\22\10\14\0\1\10\4\0\4\10\1\0\11\10"+
    "\4\0\2\10\2\0\1\10\1\0\24\10\5\0\1\10"+
    "\1\177\21\10\14\0\1\10\12\0\10\200\4\0\2\200"+
    "\2\0\1\200\1\0\24\200\5\0\23\200\14\0\1\200"+
    "\21\0\1\201\34\0\1\201\45\0\1\201\1\0\1\126"+
    "\21\0\1\126\1\134\37\0\1\126\52\0\1\130\6\0"+
    "\1\130\34\0\1\130\45\0\1\130\12\0\10\202\4\0"+
    "\2\202\2\0\1\202\1\0\24\202\5\0\23\202\14\0"+
    "\1\202\21\0\1\203\34\0\1\203\45\0\1\203\20\0"+
    "\1\137\14\0\1\204\1\0\1\205\6\0\1\127\2\0"+
    "\1\206\102\0\1\207\5\0\1\127\107\0\1\210\16\0"+
    "\1\211\5\0\1\127\2\0\1\212\6\0\1\213\104\0"+
    "\1\127\126\0\1\127\120\0\1\127\3\0\1\127\127\0"+
    "\1\127\6\0\1\213\106\0\1\127\137\0\1\207\2\0"+
    "\1\214\114\0\1\214\110\0\1\207\10\0\1\215\2\0"+
    "\1\216\71\0\2\127\2\0\1\127\1\0\1\127\1\0"+
    "\1\127\6\0\1\127\4\0\22\127\1\0\1\127\100\0"+
    "\1\60\103\0\1\151\6\0\1\151\4\0\2\63\26\0"+
    "\1\151\45\0\1\151\12\0\1\152\6\0\1\152\34\0"+
    "\1\152\45\0\1\152\4\0\4\10\1\0\11\10\4\0"+
    "\1\217\1\10\2\0\1\10\1\0\24\10\5\0\23\10"+
    "\14\0\1\10\4\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\11\10\1\220\11\10"+
    "\14\0\1\10\4\0\4\10\1\0\11\10\4\0\2\10"+
    "\2\0\1\10\1\0\24\10\5\0\1\10\1\221\21\10"+
    "\14\0\1\10\4\0\4\10\1\0\11\10\4\0\1\222"+
    "\1\10\2\0\1\10\1\0\24\10\5\0\23\10\14\0"+
    "\1\10\4\0\4\10\1\0\11\10\4\0\1\223\1\10"+
    "\2\0\1\10\1\0\24\10\5\0\23\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\5\10\1\224\15\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\2\10\1\225\20\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\10\10\1\226\12\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\1\227\1\10\2\0"+
    "\1\10\1\0\24\10\5\0\1\10\1\230\21\10\14\0"+
    "\1\10\4\0\4\10\1\0\11\10\4\0\2\10\2\0"+
    "\1\10\1\0\24\10\5\0\16\10\1\231\4\10\14\0"+
    "\1\10\4\0\4\10\1\0\11\10\4\0\2\10\2\0"+
    "\1\10\1\0\24\10\5\0\11\10\1\232\11\10\14\0"+
    "\1\10\4\0\4\10\1\0\11\10\4\0\2\10\2\0"+
    "\1\10\1\0\24\10\5\0\2\10\1\233\20\10\14\0"+
    "\1\10\4\0\4\10\1\0\6\10\1\234\2\10\4\0"+
    "\2\10\2\0\1\10\1\0\24\10\5\0\23\10\14\0"+
    "\1\10\4\0\4\10\1\0\11\10\4\0\2\10\2\0"+
    "\1\10\1\0\24\10\5\0\20\10\1\235\2\10\14\0"+
    "\1\10\4\0\4\10\1\0\11\10\4\0\1\236\1\10"+
    "\2\0\1\10\1\0\24\10\5\0\23\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\16\10\1\237\4\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\11\10\1\240\11\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\14\10\1\241\6\10\14\0\1\10"+
    "\43\0\1\127\75\0\1\127\17\0\1\127\142\0\1\127"+
    "\112\0\1\127\122\0\1\127\102\0\1\127\144\0\1\127"+
    "\141\0\1\127\127\0\1\127\77\0\1\127\153\0\1\127"+
    "\52\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\17\10\1\242\3\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\3\10\1\243\17\10\14\0\1\10"+
    "\4\0\4\10\1\0\11\10\4\0\1\244\1\10\2\0"+
    "\1\10\1\0\24\10\5\0\23\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\2\10\2\0\1\10\1\0"+
    "\24\10\5\0\11\10\1\245\11\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\2\10\2\0\1\10\1\0"+
    "\24\10\5\0\14\10\1\246\6\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\1\247\1\10\2\0\1\10"+
    "\1\0\24\10\5\0\23\10\14\0\1\10\4\0\4\10"+
    "\1\0\2\10\1\250\6\10\4\0\2\10\2\0\1\10"+
    "\1\0\24\10\5\0\23\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\1\10\1\251\21\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\10\10\1\252\12\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\14\10\1\253\6\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\16\10\1\254\4\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\5\10\1\255\15\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\11\10\1\256\11\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\1\257\1\10\2\0\1\10\1\0"+
    "\24\10\5\0\23\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\2\10\2\0\1\10\1\0\24\10\5\0"+
    "\4\10\1\260\16\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\2\10\2\0\1\10\1\0\24\10\5\0"+
    "\12\10\1\261\10\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\2\10\2\0\1\10\1\0\24\10\5\0"+
    "\14\10\1\262\6\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\2\10\2\0\1\10\1\0\24\10\5\0"+
    "\10\10\1\263\3\10\1\264\6\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\2\10\2\0\1\10\1\0"+
    "\24\10\5\0\5\10\1\265\15\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\2\10\2\0\1\10\1\0"+
    "\24\10\5\0\2\10\1\266\20\10\14\0\1\10\4\0"+
    "\4\10\1\0\11\10\4\0\1\267\1\10\2\0\1\10"+
    "\1\0\24\10\5\0\23\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\12\10\1\270\10\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\2\10\2\0\1\10\1\0\24\10"+
    "\5\0\7\10\1\271\13\10\14\0\1\10\4\0\4\10"+
    "\1\0\11\10\4\0\1\272\1\10\2\0\1\10\1\0"+
    "\24\10\5\0\23\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\2\10\2\0\1\10\1\0\24\10\5\0"+
    "\5\10\1\273\15\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\2\10\2\0\1\10\1\0\24\10\5\0"+
    "\15\10\1\274\5\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\2\10\2\0\1\10\1\0\24\10\5\0"+
    "\11\10\1\275\11\10\14\0\1\10\4\0\4\10\1\0"+
    "\11\10\4\0\1\276\1\10\2\0\1\10\1\0\24\10"+
    "\5\0\23\10\14\0\1\10\4\0\4\10\1\0\11\10"+
    "\4\0\1\277\1\10\2\0\1\10\1\0\24\10\5\0"+
    "\23\10\14\0\1\10\4\0\4\10\1\0\11\10\4\0"+
    "\2\10\2\0\1\10\1\0\24\10\5\0\1\300\22\10"+
    "\14\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11730];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\14\1\1\11\16\1\1\11\1\1\1\11"+
    "\1\1\5\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\1\1\2\0\3\1\1\0\1\11\31\1\2\0\2\11"+
    "\1\0\1\11\1\1\3\0\1\11\14\0\2\1\1\0"+
    "\1\1\1\11\26\1\4\0\1\1\6\0\62\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
   int comment_nesting = 0;
   int yyline = 0;
   int yycolumn = 0;


  _PureLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _PureLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3992) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
return;


    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { return IF;
          }
        case 65: break;
        case 27: 
          { yybegin(COMMENT); comment_nesting = 1; return MLCOMMENT;
          }
        case 66: break;
        case 6: 
          { return NATURAL;
          }
        case 67: break;
        case 21: 
          { return MLCOMMENT;
          }
        case 68: break;
        case 63: 
          { return INSTANCE;
          }
        case 69: break;
        case 40: 
          { return STRING_GAP;
          }
        case 70: break;
        case 29: 
          { return ARROW;
          }
        case 71: break;
        case 2: 
          { return WS;
          }
        case 72: break;
        case 7: 
          { return BACKSLASH;
          }
        case 73: break;
        case 57: 
          { return INFIXL;
          }
        case 74: break;
        case 9: 
          { yybegin(STRINGS); return STRING;
          }
        case 75: break;
        case 19: 
          { return LBRACK;
          }
        case 76: break;
        case 20: 
          { return RBRACK;
          }
        case 77: break;
        case 56: 
          { return INFIXR;
          }
        case 78: break;
        case 10: 
          { return LCURLY;
          }
        case 79: break;
        case 26: 
          { return DDOT;
          }
        case 80: break;
        case 14: 
          { return TICK;
          }
        case 81: break;
        case 46: 
          { return TYPE;
          }
        case 82: break;
        case 11: 
          { return RCURLY;
          }
        case 83: break;
        case 51: 
          { return FALSE;
          }
        case 84: break;
        case 25: 
          { return OF;
          }
        case 85: break;
        case 61: 
          { return NEWTYPE;
          }
        case 86: break;
        case 28: 
          { return SLCOMMENT;
          }
        case 87: break;
        case 64: 
          { return QUALIFIED;
          }
        case 88: break;
        case 34: 
          { return DARROW;
          }
        case 89: break;
        case 16: 
          { return COMMA;
          }
        case 90: break;
        case 35: 
          { return LARROW;
          }
        case 91: break;
        case 8: 
          { return DOT;
          }
        case 92: break;
        case 42: 
          { yybegin(BLOCK_STRINGS); return STRING;
          }
        case 93: break;
        case 32: 
          { return IN;
          }
        case 94: break;
        case 13: 
          { return SEMI;
          }
        case 95: break;
        case 50: 
          { return WHERE;
          }
        case 96: break;
        case 58: 
          { return IMPORT;
          }
        case 97: break;
        case 23: 
          { return STRING_ERROR;
          }
        case 98: break;
        case 39: 
          { return STRING_ESCAPED;
          }
        case 99: break;
        case 55: 
          { return FORALL;
          }
        case 100: break;
        case 24: 
          { yybegin(YYINITIAL); return STRING;
          }
        case 101: break;
        case 5: 
          { return PROPER_NAME;
          }
        case 102: break;
        case 3: 
          { return OPERATOR;
          }
        case 103: break;
        case 48: 
          { return THEN;
          }
        case 104: break;
        case 30: 
          { return DO;
          }
        case 105: break;
        case 45: 
          { return DATA;
          }
        case 106: break;
        case 37: 
          { comment_nesting++; return MLCOMMENT;
          }
        case 107: break;
        case 53: 
          { return CLASS;
          }
        case 108: break;
        case 36: 
          { return DCOLON;
          }
        case 109: break;
        case 31: 
          { return AS;
          }
        case 110: break;
        case 44: 
          { return ELSE;
          }
        case 111: break;
        case 41: 
          { return FLOAT;
          }
        case 112: break;
        case 49: 
          { return CASE;
          }
        case 113: break;
        case 62: 
          { return FOREIGN;
          }
        case 114: break;
        case 54: 
          { return DERIVE;
          }
        case 115: break;
        case 52: 
          { return INFIX;
          }
        case 116: break;
        case 43: 
          { return LET;
          }
        case 117: break;
        case 22: 
          { return STRING;
          }
        case 118: break;
        case 15: 
          { return PIPE;
          }
        case 119: break;
        case 1: 
          { return ERROR;
          }
        case 120: break;
        case 47: 
          { return TRUE;
          }
        case 121: break;
        case 17: 
          { return LPAREN;
          }
        case 122: break;
        case 4: 
          { return IDENT;
          }
        case 123: break;
        case 38: 
          { comment_nesting--; if (comment_nesting == 0) yybegin(YYINITIAL); return MLCOMMENT;
          }
        case 124: break;
        case 18: 
          { return RPAREN;
          }
        case 125: break;
        case 59: 
          { return MODULE;
          }
        case 126: break;
        case 12: 
          { return EQ;
          }
        case 127: break;
        case 60: 
          { return HIDING;
          }
        case 128: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
